name: pr-realm-js
on: pull_request

jobs:
  build-and-test:
    name: Build and test for ${{ matrix.variant.os }} ${{ matrix.variant.arch }}
    runs-on: ${{ matrix.variant.runner }}
    env:
      npm_config_realm_local_prebuilds: ${{github.workspace}}/prebuilds
      REALM_DISABLE_SYNC_TESTS: true
    strategy:
      #fail-fast: false
      matrix:
        variant:
          - { os: linux, runner: ubuntu-latest, arch: x64, artifact-path: prebuilds, test-node: true, test-electron: true }
          - { os: windows, runner: windows-latest, arch: x64, artifact-path: prebuilds, test-node: true, test-electron: true }
          - { os: windows, runner: windows-latest, arch: ia32, artifact-path: prebuilds }
          - { os: android, runner: ubuntu-latest, arch: x86_64, artifact-path: react-native/android/src/main/jniLibs }
          - { os: android, runner: ubuntu-latest, arch: armeabi-v7a, artifact-path: react-native/android/src/main/jniLibs }
          - { os: android, runner: ubuntu-latest, arch: arm64-v8a, artifact-path: react-native/android/src/main/jniLibs }
          - { os: android, runner: ubuntu-latest, arch: x86, artifact-path: react-native/android/src/main/jniLibs }
            #- { os: darwin, runner: macos-latest, arch: x64, artifact-path: prebuilds, test-node: true, test-electron: true }
            #- { os: ios, runner: macos-latest, arch: apple, artifact-path: react-native/ios/realm-js-ios.xcframework }
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: "recursive"

      - name: Setup node version
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup NPM version
        run: npm install -g npm@7

      - name: Get NPM cache directory
        id: npm-cache-dir
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore NPM cache
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
 
      - name: Cache prebuild artifacts
        id: cache-prebuild
        uses: actions/cache@v2
        env:
          cache-name: prebuild
        with:
          path: ${{ matrix.variant.artifact-path }}
          key: ${{ runner.os }}-${{ matrix.variant.os }}-${{ matrix.variant.arch }}-${{ env.cache-name }}-${{hashFiles('./src/**', 'vendor/**')}}

          # TODO: figure out a way to optimize using partial builds
          #- name: Cache iOS build artifacts
          #  id: cache-ios-build
          #  uses: actions/cache@v2
          #  env:
          #    cache-name: cache-ios-build
          #  with:
          #    path: react-native/ios/build
          #    key: build-ios-${{ hashFiles('./src/**') }}
          #    restore-keys: |
          #      build-ios-

      - name: MSVC Setup
        if: ${{ runner.os == 'Windows' }}
        uses: ilammy/msvc-dev-cmd@v1

      - name: Windows Environment setup
        if: ${{ runner.os == 'Windows' }}
        run: |
          Invoke-WebRequest -Uri https://static.realm.io/downloads/vcpkg.zip -OutFile C:\vcpkg.zip
          Expand-Archive -Path C:\vcpkg.zip -DestinationPath C:\
        shell: powershell

      # ninja-build is used by default if available and results in faster build times
      # In linux, electron requires a connected display.  We fake this by giving it a headless environment using xvfb
      # Relevant issue: https://github.com/juliangruber/browser-run/issues/147
      - name: Linux Environment setup
        if: ${{ (matrix.variant.runner == 'ubuntu-latest') }}
        run: sudo apt-get install ccache ninja-build xvfb

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1
        if: ${{ runner.os != 'Windows' }}
        env:
          cache-name: ccache
        with:
          key: ${{ runner.os }}-${{ matrix.variant.os }}-${{ matrix.variant.arch }}-${{ env.cache-name }}

      - name: Prepend ccache executables to the PATH
        if: ${{ runner.os != 'Windows' }}
        run: echo PATH="/usr/lib/ccache:/usr/local/opt/ccache/libexec:$PATH" >> $GITHUB_ENV

      # Install node dependencies
      - name: Install prebuilds
        if: steps.cache-prebuild.outputs.cache-hit == 'true'
        run: npm ci

      # build the c++ library for standard targets
      - name: Build node
        if: ${{ (matrix.variant.os != 'ios') && (matrix.variant.os != 'android') }}
        run: npm run build:node-${{matrix.variant.arch}}

      # build the c++ library for IOS
      - name: Build IOS
        if: ${{ (matrix.variant.os == 'ios') }}
        run: npm run build:ios

      # build the c++ library for Android
      - name: Build Android
        if: ${{ (matrix.variant.os == 'android') }}
        run: npm run build:android

      - name: Install the node dependencies in the test folder
        working-directory: ./tests
        run: npm ci --ignore-scripts

      # Run the node test scripts (without sync)
      - name: Run tests
        if: ${{ (matrix.variant.test-node) }}
        working-directory: ./tests
        run: npm test

      - name: Install electron test dependencies
        if: ${{ (matrix.variant.test-electron) }}
        working-directory: ./tests/electron
        run: npm ci

      - name: Run electron tests on non-Linux
        if: ${{ (matrix.variant.test-electron) && (matrix.variant.os != 'linux') }}
        working-directory: ./tests/electron
        run: |
          npm test -- --process=main
          npm test -- --process=render

      - name: Run electron tests on Linux
        if: ${{ (matrix.variant.test-electron) && (matrix.variant.os == 'linux') }}
        working-directory: ./tests/electron
        run: |
          xvfb-run --auto-servernum npm test -- --process=main
          xvfb-run --auto-servernum npm test -- --process=render

      # all tests passed, upload artifacts
      # the dummy file included is to force preserving paths
      - name: Upload prebuild artifact
        uses: actions/upload-artifact@v2
        with:
          name: realm-js-prebuilds
          path: |
            dependencies.list
            ${{ matrix.variant.artifact-path }}

  publish:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node version
        uses: actions/setup-node@v2
        with:
          node-version: '14'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Setup NPM version
        run: npm install -g npm@7

      - name: Get NPM cache directory
        id: npm-cache-dir
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Restore NPM cache
        id: npm-cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install node modules
        run: npm ci --ignore-scripts

      - name: Download prebuilds
        uses: actions/download-artifact@v2
        with:
          name: realm-js-prebuilds

      - name: Display structure of downloaded files
        run: ls -R prebuilds react-native/android/src/main/jniLibs

      - name: Publish to Github
        run: npx prebuild --upload-all ${{ secrets.GITHUB_TOKEN }}

  baas-realm-js:
    runs-on: ubuntu-latest
    name: Deploy MDB Realm for realm js
    outputs:
      deployedApps: ${{ steps.deploy-mdb-apps.outputs.deployedApps }}
    timeout-minutes: 20
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          submodules: false

      - uses: realm/ci-actions/mdb-realm/deployApps@fe278fedebba5508c052e970fffa099de1285dff
        id: deploy-mdb-apps
        with:
          projectId: ${{ secrets.ATLAS_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_PRIVATE_API_KEY }}
          appsPath: ${{ github.workspace }}/Tests/TestApps
          differentiator: realm js

  cleanup-realm-js:
    runs-on: ubuntu-latest
    name: Cleanup realm js
    #needs: [build-and-test, baas-realm-js]
    needs: [build-and-test]
    if: always()
    timeout-minutes: 10
    steps:
      - uses: realm/ci-actions/mdb-realm/cleanup@fe278fedebba5508c052e970fffa099de1285dff
        with:
          projectId: ${{ secrets.ATLAS_PROJECT_ID }}
          apiKey: ${{ secrets.ATLAS_PUBLIC_API_KEY }}
          privateApiKey: ${{ secrets.ATLAS_PRIVATE_API_KEY }}
          differentiator: realm js
